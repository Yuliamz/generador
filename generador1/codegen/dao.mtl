[module dao('http://www.eclipse.org/uml2/4.0.0/UML')/]

[template public generate(c : Class)]
[comment @main/]
[file ('/src/main/java/' + c._package.qualifiedName.replaceAll('::|\\.', '/') +'/persistencia/'+ c.name + 'DAO.java', false, 'UTF-8')]
package [c._package.qualifiedName.replaceAll('::', '.')/].persistencia;

import [c._package.qualifiedName.replaceAll('::', '.')/].persistencia.entity.*;
import java.util.List;
import javax.persistence.*;
import javax.ejb.Stateless;

/**
 *  @generated
 *  @author [c._package.eAnnotations.details->select(a: ecore::EStringToStringMapEntry|a.key='author').value/]
 */
[c.classHeader()/] {
	
	@PersistenceContext
    private EntityManager em;

	[c.getAll()/]
	[c.getID()/]
	[c.insert()/]
	[c.delete()/]
	[c.update()/]
	
}
[/file]
[/template]

[template public classHeader(c : Class)]
@Stateless
[c.visibility/] class [c.name/]DAO[c.extendsHeader()/][c.implementsHeader()/]
[/template]

[template public extendsHeader(c : Class) ? (c.superClass->notEmpty())]
 extends [c.superClass.name/]
[/template]

[template public implementsHeader(c : Class) ? (c.interfaceRealization->notEmpty())]
 implements [c.interfaceRealization.supplier.name->sep(', ')/]
[/template]

[template public getAll(a : Class)]

/**
 * Retorna una lista con los [a.name/] que se encuentran en la base de datos.
 * @return lista de [a.name/]
 * @generated
 */
public List<[a.name/]> obtenerTodos(){
	return em.createNamedQuery("[a.name/].obtenerTodos").getResultList();
}
[/template]

[template public getID(a : Class)]

/**
 * Obtiene [a.name/] dado su identificador. 	
 * @param id identificador del elemento [a.name/]
 * @return [a.name/] del id dado
 * @generated
 */
public [a.name/] obtener(Long id){
	return em.find([a.name/].class, id);
}

[/template]

[template public insert(a : Class)]

/**
 * Almacena la informacion de [a.name/]
 * @param entidad [a.name/] a guardar
 * @return [a.name/] con los cambios realizados por el proceso de guardar
 * @generated
 */
public [a.name/] guardar([a.name/] entidad){
	em.persist(entidad);
	return entidad;
}

[/template]

[template public update(a : Class)]

/**
 * Actualiza la informacion de [a.name/].
 * @param entidad [a.name/] a actualizar
 * @generated
 */
public void actualizar([a.name/] entidad){
	em.merge(entidad);
}

[/template]

[template public delete(a : Class)]

/**
 * Elimina el registro [a.name/] con el identificador dado.
 * @param id identificador del [a.name/]
 * @generated 
 */
public void borrar(Long id){
	em.remove(em.find([a.name/].class, id));
}

[/template]